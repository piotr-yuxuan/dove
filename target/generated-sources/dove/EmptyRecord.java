/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package dove;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class EmptyRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7738740579553580038L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EmptyRecord\",\"namespace\":\"dove\",\"fields\":[]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<EmptyRecord> ENCODER =
      new BinaryMessageEncoder<EmptyRecord>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<EmptyRecord> DECODER =
      new BinaryMessageDecoder<EmptyRecord>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<EmptyRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<EmptyRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<EmptyRecord>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this EmptyRecord to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a EmptyRecord from a ByteBuffer. */
  public static EmptyRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }


  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Creates a new EmptyRecord RecordBuilder.
   * @return A new EmptyRecord RecordBuilder
   */
  public static dove.EmptyRecord.Builder newBuilder() {
    return new dove.EmptyRecord.Builder();
  }

  /**
   * Creates a new EmptyRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EmptyRecord RecordBuilder
   */
  public static dove.EmptyRecord.Builder newBuilder(dove.EmptyRecord.Builder other) {
    return new dove.EmptyRecord.Builder(other);
  }

  /**
   * Creates a new EmptyRecord RecordBuilder by copying an existing EmptyRecord instance.
   * @param other The existing instance to copy.
   * @return A new EmptyRecord RecordBuilder
   */
  public static dove.EmptyRecord.Builder newBuilder(dove.EmptyRecord other) {
    return new dove.EmptyRecord.Builder(other);
  }

  /**
   * RecordBuilder for EmptyRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EmptyRecord>
    implements org.apache.avro.data.RecordBuilder<EmptyRecord> {


    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(dove.EmptyRecord.Builder other) {
      super(other);
    }

    /**
     * Creates a Builder by copying an existing EmptyRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(dove.EmptyRecord other) {
            super(SCHEMA$);
    }

    @Override
    @SuppressWarnings("unchecked")
    public EmptyRecord build() {
      try {
        EmptyRecord record = new EmptyRecord();
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<EmptyRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<EmptyRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<EmptyRecord>
    READER$ = (org.apache.avro.io.DatumReader<EmptyRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
