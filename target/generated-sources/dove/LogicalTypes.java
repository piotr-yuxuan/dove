/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package dove;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class LogicalTypes extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4448068159470622024L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LogicalTypes\",\"namespace\":\"dove\",\"fields\":[{\"name\":\"aDecimal11\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":1,\"scale\":1},\"doc\":\"Logical type decimal not tested with fixed or bytes\"},{\"name\":\"aDecimal81\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":8,\"scale\":1}},{\"name\":\"aDecimal\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":8,\"scale\":8}},{\"name\":\"aDate\",\"type\":{\"type\":\"int\",\"logicalType\":\"date\"}},{\"name\":\"aDateInt\",\"type\":{\"type\":\"int\",\"logicalType\":\"date\"}},{\"name\":\"aTimeMillis\",\"type\":{\"type\":\"int\",\"logicalType\":\"time-millis\"}},{\"name\":\"aTimeMillisInt\",\"type\":{\"type\":\"int\",\"logicalType\":\"time-millis\"}},{\"name\":\"aTimeMicrosLong\",\"type\":{\"type\":\"long\",\"logicalType\":\"time-micros\"}},{\"name\":\"aTimestampMillis\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"aTimestampMillisInt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"aTimestampMicrosLong\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-micros\"}},{\"name\":\"aDurationBytes\",\"type\":{\"type\":\"fixed\",\"name\":\"duration\",\"size\":12,\"logicalType\":\"duration\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<LogicalTypes> ENCODER =
      new BinaryMessageEncoder<LogicalTypes>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<LogicalTypes> DECODER =
      new BinaryMessageDecoder<LogicalTypes>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<LogicalTypes> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<LogicalTypes> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<LogicalTypes>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this LogicalTypes to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a LogicalTypes from a ByteBuffer. */
  public static LogicalTypes fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Logical type decimal not tested with fixed or bytes */
  @Deprecated public java.math.BigDecimal aDecimal11;
  @Deprecated public java.math.BigDecimal aDecimal81;
  @Deprecated public java.math.BigDecimal aDecimal;
  @Deprecated public org.joda.time.LocalDate aDate;
  @Deprecated public org.joda.time.LocalDate aDateInt;
  @Deprecated public org.joda.time.LocalTime aTimeMillis;
  @Deprecated public org.joda.time.LocalTime aTimeMillisInt;
  @Deprecated public long aTimeMicrosLong;
  @Deprecated public org.joda.time.DateTime aTimestampMillis;
  @Deprecated public org.joda.time.DateTime aTimestampMillisInt;
  @Deprecated public long aTimestampMicrosLong;
  @Deprecated public dove.duration aDurationBytes;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public LogicalTypes() {}

  /**
   * All-args constructor.
   * @param aDecimal11 Logical type decimal not tested with fixed or bytes
   * @param aDecimal81 The new value for aDecimal81
   * @param aDecimal The new value for aDecimal
   * @param aDate The new value for aDate
   * @param aDateInt The new value for aDateInt
   * @param aTimeMillis The new value for aTimeMillis
   * @param aTimeMillisInt The new value for aTimeMillisInt
   * @param aTimeMicrosLong The new value for aTimeMicrosLong
   * @param aTimestampMillis The new value for aTimestampMillis
   * @param aTimestampMillisInt The new value for aTimestampMillisInt
   * @param aTimestampMicrosLong The new value for aTimestampMicrosLong
   * @param aDurationBytes The new value for aDurationBytes
   */
  public LogicalTypes(java.math.BigDecimal aDecimal11, java.math.BigDecimal aDecimal81, java.math.BigDecimal aDecimal, org.joda.time.LocalDate aDate, org.joda.time.LocalDate aDateInt, org.joda.time.LocalTime aTimeMillis, org.joda.time.LocalTime aTimeMillisInt, java.lang.Long aTimeMicrosLong, org.joda.time.DateTime aTimestampMillis, org.joda.time.DateTime aTimestampMillisInt, java.lang.Long aTimestampMicrosLong, dove.duration aDurationBytes) {
    this.aDecimal11 = aDecimal11;
    this.aDecimal81 = aDecimal81;
    this.aDecimal = aDecimal;
    this.aDate = aDate;
    this.aDateInt = aDateInt;
    this.aTimeMillis = aTimeMillis;
    this.aTimeMillisInt = aTimeMillisInt;
    this.aTimeMicrosLong = aTimeMicrosLong;
    this.aTimestampMillis = aTimestampMillis;
    this.aTimestampMillisInt = aTimestampMillisInt;
    this.aTimestampMicrosLong = aTimestampMicrosLong;
    this.aDurationBytes = aDurationBytes;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return aDecimal11;
    case 1: return aDecimal81;
    case 2: return aDecimal;
    case 3: return aDate;
    case 4: return aDateInt;
    case 5: return aTimeMillis;
    case 6: return aTimeMillisInt;
    case 7: return aTimeMicrosLong;
    case 8: return aTimestampMillis;
    case 9: return aTimestampMillisInt;
    case 10: return aTimestampMicrosLong;
    case 11: return aDurationBytes;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  protected static final org.apache.avro.data.TimeConversions.DateConversion DATE_CONVERSION = new org.apache.avro.data.TimeConversions.DateConversion();
  protected static final org.apache.avro.data.TimeConversions.TimeConversion TIME_CONVERSION = new org.apache.avro.data.TimeConversions.TimeConversion();
  protected static final org.apache.avro.data.TimeConversions.TimestampConversion TIMESTAMP_CONVERSION = new org.apache.avro.data.TimeConversions.TimestampConversion();
  protected static final org.apache.avro.Conversions.DecimalConversion DECIMAL_CONVERSION = new org.apache.avro.Conversions.DecimalConversion();

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      DECIMAL_CONVERSION,
      DECIMAL_CONVERSION,
      DECIMAL_CONVERSION,
      DATE_CONVERSION,
      DATE_CONVERSION,
      TIME_CONVERSION,
      TIME_CONVERSION,
      null,
      TIMESTAMP_CONVERSION,
      TIMESTAMP_CONVERSION,
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: aDecimal11 = (java.math.BigDecimal)value$; break;
    case 1: aDecimal81 = (java.math.BigDecimal)value$; break;
    case 2: aDecimal = (java.math.BigDecimal)value$; break;
    case 3: aDate = (org.joda.time.LocalDate)value$; break;
    case 4: aDateInt = (org.joda.time.LocalDate)value$; break;
    case 5: aTimeMillis = (org.joda.time.LocalTime)value$; break;
    case 6: aTimeMillisInt = (org.joda.time.LocalTime)value$; break;
    case 7: aTimeMicrosLong = (java.lang.Long)value$; break;
    case 8: aTimestampMillis = (org.joda.time.DateTime)value$; break;
    case 9: aTimestampMillisInt = (org.joda.time.DateTime)value$; break;
    case 10: aTimestampMicrosLong = (java.lang.Long)value$; break;
    case 11: aDurationBytes = (dove.duration)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'aDecimal11' field.
   * @return Logical type decimal not tested with fixed or bytes
   */
  public java.math.BigDecimal getADecimal11() {
    return aDecimal11;
  }

  /**
   * Sets the value of the 'aDecimal11' field.
   * Logical type decimal not tested with fixed or bytes
   * @param value the value to set.
   */
  public void setADecimal11(java.math.BigDecimal value) {
    this.aDecimal11 = value;
  }

  /**
   * Gets the value of the 'aDecimal81' field.
   * @return The value of the 'aDecimal81' field.
   */
  public java.math.BigDecimal getADecimal81() {
    return aDecimal81;
  }

  /**
   * Sets the value of the 'aDecimal81' field.
   * @param value the value to set.
   */
  public void setADecimal81(java.math.BigDecimal value) {
    this.aDecimal81 = value;
  }

  /**
   * Gets the value of the 'aDecimal' field.
   * @return The value of the 'aDecimal' field.
   */
  public java.math.BigDecimal getADecimal() {
    return aDecimal;
  }

  /**
   * Sets the value of the 'aDecimal' field.
   * @param value the value to set.
   */
  public void setADecimal(java.math.BigDecimal value) {
    this.aDecimal = value;
  }

  /**
   * Gets the value of the 'aDate' field.
   * @return The value of the 'aDate' field.
   */
  public org.joda.time.LocalDate getADate() {
    return aDate;
  }

  /**
   * Sets the value of the 'aDate' field.
   * @param value the value to set.
   */
  public void setADate(org.joda.time.LocalDate value) {
    this.aDate = value;
  }

  /**
   * Gets the value of the 'aDateInt' field.
   * @return The value of the 'aDateInt' field.
   */
  public org.joda.time.LocalDate getADateInt() {
    return aDateInt;
  }

  /**
   * Sets the value of the 'aDateInt' field.
   * @param value the value to set.
   */
  public void setADateInt(org.joda.time.LocalDate value) {
    this.aDateInt = value;
  }

  /**
   * Gets the value of the 'aTimeMillis' field.
   * @return The value of the 'aTimeMillis' field.
   */
  public org.joda.time.LocalTime getATimeMillis() {
    return aTimeMillis;
  }

  /**
   * Sets the value of the 'aTimeMillis' field.
   * @param value the value to set.
   */
  public void setATimeMillis(org.joda.time.LocalTime value) {
    this.aTimeMillis = value;
  }

  /**
   * Gets the value of the 'aTimeMillisInt' field.
   * @return The value of the 'aTimeMillisInt' field.
   */
  public org.joda.time.LocalTime getATimeMillisInt() {
    return aTimeMillisInt;
  }

  /**
   * Sets the value of the 'aTimeMillisInt' field.
   * @param value the value to set.
   */
  public void setATimeMillisInt(org.joda.time.LocalTime value) {
    this.aTimeMillisInt = value;
  }

  /**
   * Gets the value of the 'aTimeMicrosLong' field.
   * @return The value of the 'aTimeMicrosLong' field.
   */
  public java.lang.Long getATimeMicrosLong() {
    return aTimeMicrosLong;
  }

  /**
   * Sets the value of the 'aTimeMicrosLong' field.
   * @param value the value to set.
   */
  public void setATimeMicrosLong(java.lang.Long value) {
    this.aTimeMicrosLong = value;
  }

  /**
   * Gets the value of the 'aTimestampMillis' field.
   * @return The value of the 'aTimestampMillis' field.
   */
  public org.joda.time.DateTime getATimestampMillis() {
    return aTimestampMillis;
  }

  /**
   * Sets the value of the 'aTimestampMillis' field.
   * @param value the value to set.
   */
  public void setATimestampMillis(org.joda.time.DateTime value) {
    this.aTimestampMillis = value;
  }

  /**
   * Gets the value of the 'aTimestampMillisInt' field.
   * @return The value of the 'aTimestampMillisInt' field.
   */
  public org.joda.time.DateTime getATimestampMillisInt() {
    return aTimestampMillisInt;
  }

  /**
   * Sets the value of the 'aTimestampMillisInt' field.
   * @param value the value to set.
   */
  public void setATimestampMillisInt(org.joda.time.DateTime value) {
    this.aTimestampMillisInt = value;
  }

  /**
   * Gets the value of the 'aTimestampMicrosLong' field.
   * @return The value of the 'aTimestampMicrosLong' field.
   */
  public java.lang.Long getATimestampMicrosLong() {
    return aTimestampMicrosLong;
  }

  /**
   * Sets the value of the 'aTimestampMicrosLong' field.
   * @param value the value to set.
   */
  public void setATimestampMicrosLong(java.lang.Long value) {
    this.aTimestampMicrosLong = value;
  }

  /**
   * Gets the value of the 'aDurationBytes' field.
   * @return The value of the 'aDurationBytes' field.
   */
  public dove.duration getADurationBytes() {
    return aDurationBytes;
  }

  /**
   * Sets the value of the 'aDurationBytes' field.
   * @param value the value to set.
   */
  public void setADurationBytes(dove.duration value) {
    this.aDurationBytes = value;
  }

  /**
   * Creates a new LogicalTypes RecordBuilder.
   * @return A new LogicalTypes RecordBuilder
   */
  public static dove.LogicalTypes.Builder newBuilder() {
    return new dove.LogicalTypes.Builder();
  }

  /**
   * Creates a new LogicalTypes RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new LogicalTypes RecordBuilder
   */
  public static dove.LogicalTypes.Builder newBuilder(dove.LogicalTypes.Builder other) {
    return new dove.LogicalTypes.Builder(other);
  }

  /**
   * Creates a new LogicalTypes RecordBuilder by copying an existing LogicalTypes instance.
   * @param other The existing instance to copy.
   * @return A new LogicalTypes RecordBuilder
   */
  public static dove.LogicalTypes.Builder newBuilder(dove.LogicalTypes other) {
    return new dove.LogicalTypes.Builder(other);
  }

  /**
   * RecordBuilder for LogicalTypes instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LogicalTypes>
    implements org.apache.avro.data.RecordBuilder<LogicalTypes> {

    /** Logical type decimal not tested with fixed or bytes */
    private java.math.BigDecimal aDecimal11;
    private java.math.BigDecimal aDecimal81;
    private java.math.BigDecimal aDecimal;
    private org.joda.time.LocalDate aDate;
    private org.joda.time.LocalDate aDateInt;
    private org.joda.time.LocalTime aTimeMillis;
    private org.joda.time.LocalTime aTimeMillisInt;
    private long aTimeMicrosLong;
    private org.joda.time.DateTime aTimestampMillis;
    private org.joda.time.DateTime aTimestampMillisInt;
    private long aTimestampMicrosLong;
    private dove.duration aDurationBytes;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(dove.LogicalTypes.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.aDecimal11)) {
        this.aDecimal11 = data().deepCopy(fields()[0].schema(), other.aDecimal11);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.aDecimal81)) {
        this.aDecimal81 = data().deepCopy(fields()[1].schema(), other.aDecimal81);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.aDecimal)) {
        this.aDecimal = data().deepCopy(fields()[2].schema(), other.aDecimal);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.aDate)) {
        this.aDate = data().deepCopy(fields()[3].schema(), other.aDate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.aDateInt)) {
        this.aDateInt = data().deepCopy(fields()[4].schema(), other.aDateInt);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.aTimeMillis)) {
        this.aTimeMillis = data().deepCopy(fields()[5].schema(), other.aTimeMillis);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.aTimeMillisInt)) {
        this.aTimeMillisInt = data().deepCopy(fields()[6].schema(), other.aTimeMillisInt);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.aTimeMicrosLong)) {
        this.aTimeMicrosLong = data().deepCopy(fields()[7].schema(), other.aTimeMicrosLong);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.aTimestampMillis)) {
        this.aTimestampMillis = data().deepCopy(fields()[8].schema(), other.aTimestampMillis);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.aTimestampMillisInt)) {
        this.aTimestampMillisInt = data().deepCopy(fields()[9].schema(), other.aTimestampMillisInt);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.aTimestampMicrosLong)) {
        this.aTimestampMicrosLong = data().deepCopy(fields()[10].schema(), other.aTimestampMicrosLong);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.aDurationBytes)) {
        this.aDurationBytes = data().deepCopy(fields()[11].schema(), other.aDurationBytes);
        fieldSetFlags()[11] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing LogicalTypes instance
     * @param other The existing instance to copy.
     */
    private Builder(dove.LogicalTypes other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.aDecimal11)) {
        this.aDecimal11 = data().deepCopy(fields()[0].schema(), other.aDecimal11);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.aDecimal81)) {
        this.aDecimal81 = data().deepCopy(fields()[1].schema(), other.aDecimal81);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.aDecimal)) {
        this.aDecimal = data().deepCopy(fields()[2].schema(), other.aDecimal);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.aDate)) {
        this.aDate = data().deepCopy(fields()[3].schema(), other.aDate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.aDateInt)) {
        this.aDateInt = data().deepCopy(fields()[4].schema(), other.aDateInt);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.aTimeMillis)) {
        this.aTimeMillis = data().deepCopy(fields()[5].schema(), other.aTimeMillis);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.aTimeMillisInt)) {
        this.aTimeMillisInt = data().deepCopy(fields()[6].schema(), other.aTimeMillisInt);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.aTimeMicrosLong)) {
        this.aTimeMicrosLong = data().deepCopy(fields()[7].schema(), other.aTimeMicrosLong);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.aTimestampMillis)) {
        this.aTimestampMillis = data().deepCopy(fields()[8].schema(), other.aTimestampMillis);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.aTimestampMillisInt)) {
        this.aTimestampMillisInt = data().deepCopy(fields()[9].schema(), other.aTimestampMillisInt);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.aTimestampMicrosLong)) {
        this.aTimestampMicrosLong = data().deepCopy(fields()[10].schema(), other.aTimestampMicrosLong);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.aDurationBytes)) {
        this.aDurationBytes = data().deepCopy(fields()[11].schema(), other.aDurationBytes);
        fieldSetFlags()[11] = true;
      }
    }

    /**
      * Gets the value of the 'aDecimal11' field.
      * Logical type decimal not tested with fixed or bytes
      * @return The value.
      */
    public java.math.BigDecimal getADecimal11() {
      return aDecimal11;
    }

    /**
      * Sets the value of the 'aDecimal11' field.
      * Logical type decimal not tested with fixed or bytes
      * @param value The value of 'aDecimal11'.
      * @return This builder.
      */
    public dove.LogicalTypes.Builder setADecimal11(java.math.BigDecimal value) {
      validate(fields()[0], value);
      this.aDecimal11 = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'aDecimal11' field has been set.
      * Logical type decimal not tested with fixed or bytes
      * @return True if the 'aDecimal11' field has been set, false otherwise.
      */
    public boolean hasADecimal11() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'aDecimal11' field.
      * Logical type decimal not tested with fixed or bytes
      * @return This builder.
      */
    public dove.LogicalTypes.Builder clearADecimal11() {
      aDecimal11 = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'aDecimal81' field.
      * @return The value.
      */
    public java.math.BigDecimal getADecimal81() {
      return aDecimal81;
    }

    /**
      * Sets the value of the 'aDecimal81' field.
      * @param value The value of 'aDecimal81'.
      * @return This builder.
      */
    public dove.LogicalTypes.Builder setADecimal81(java.math.BigDecimal value) {
      validate(fields()[1], value);
      this.aDecimal81 = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'aDecimal81' field has been set.
      * @return True if the 'aDecimal81' field has been set, false otherwise.
      */
    public boolean hasADecimal81() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'aDecimal81' field.
      * @return This builder.
      */
    public dove.LogicalTypes.Builder clearADecimal81() {
      aDecimal81 = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'aDecimal' field.
      * @return The value.
      */
    public java.math.BigDecimal getADecimal() {
      return aDecimal;
    }

    /**
      * Sets the value of the 'aDecimal' field.
      * @param value The value of 'aDecimal'.
      * @return This builder.
      */
    public dove.LogicalTypes.Builder setADecimal(java.math.BigDecimal value) {
      validate(fields()[2], value);
      this.aDecimal = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'aDecimal' field has been set.
      * @return True if the 'aDecimal' field has been set, false otherwise.
      */
    public boolean hasADecimal() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'aDecimal' field.
      * @return This builder.
      */
    public dove.LogicalTypes.Builder clearADecimal() {
      aDecimal = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'aDate' field.
      * @return The value.
      */
    public org.joda.time.LocalDate getADate() {
      return aDate;
    }

    /**
      * Sets the value of the 'aDate' field.
      * @param value The value of 'aDate'.
      * @return This builder.
      */
    public dove.LogicalTypes.Builder setADate(org.joda.time.LocalDate value) {
      validate(fields()[3], value);
      this.aDate = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'aDate' field has been set.
      * @return True if the 'aDate' field has been set, false otherwise.
      */
    public boolean hasADate() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'aDate' field.
      * @return This builder.
      */
    public dove.LogicalTypes.Builder clearADate() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'aDateInt' field.
      * @return The value.
      */
    public org.joda.time.LocalDate getADateInt() {
      return aDateInt;
    }

    /**
      * Sets the value of the 'aDateInt' field.
      * @param value The value of 'aDateInt'.
      * @return This builder.
      */
    public dove.LogicalTypes.Builder setADateInt(org.joda.time.LocalDate value) {
      validate(fields()[4], value);
      this.aDateInt = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'aDateInt' field has been set.
      * @return True if the 'aDateInt' field has been set, false otherwise.
      */
    public boolean hasADateInt() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'aDateInt' field.
      * @return This builder.
      */
    public dove.LogicalTypes.Builder clearADateInt() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'aTimeMillis' field.
      * @return The value.
      */
    public org.joda.time.LocalTime getATimeMillis() {
      return aTimeMillis;
    }

    /**
      * Sets the value of the 'aTimeMillis' field.
      * @param value The value of 'aTimeMillis'.
      * @return This builder.
      */
    public dove.LogicalTypes.Builder setATimeMillis(org.joda.time.LocalTime value) {
      validate(fields()[5], value);
      this.aTimeMillis = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'aTimeMillis' field has been set.
      * @return True if the 'aTimeMillis' field has been set, false otherwise.
      */
    public boolean hasATimeMillis() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'aTimeMillis' field.
      * @return This builder.
      */
    public dove.LogicalTypes.Builder clearATimeMillis() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'aTimeMillisInt' field.
      * @return The value.
      */
    public org.joda.time.LocalTime getATimeMillisInt() {
      return aTimeMillisInt;
    }

    /**
      * Sets the value of the 'aTimeMillisInt' field.
      * @param value The value of 'aTimeMillisInt'.
      * @return This builder.
      */
    public dove.LogicalTypes.Builder setATimeMillisInt(org.joda.time.LocalTime value) {
      validate(fields()[6], value);
      this.aTimeMillisInt = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'aTimeMillisInt' field has been set.
      * @return True if the 'aTimeMillisInt' field has been set, false otherwise.
      */
    public boolean hasATimeMillisInt() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'aTimeMillisInt' field.
      * @return This builder.
      */
    public dove.LogicalTypes.Builder clearATimeMillisInt() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'aTimeMicrosLong' field.
      * @return The value.
      */
    public java.lang.Long getATimeMicrosLong() {
      return aTimeMicrosLong;
    }

    /**
      * Sets the value of the 'aTimeMicrosLong' field.
      * @param value The value of 'aTimeMicrosLong'.
      * @return This builder.
      */
    public dove.LogicalTypes.Builder setATimeMicrosLong(long value) {
      validate(fields()[7], value);
      this.aTimeMicrosLong = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'aTimeMicrosLong' field has been set.
      * @return True if the 'aTimeMicrosLong' field has been set, false otherwise.
      */
    public boolean hasATimeMicrosLong() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'aTimeMicrosLong' field.
      * @return This builder.
      */
    public dove.LogicalTypes.Builder clearATimeMicrosLong() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'aTimestampMillis' field.
      * @return The value.
      */
    public org.joda.time.DateTime getATimestampMillis() {
      return aTimestampMillis;
    }

    /**
      * Sets the value of the 'aTimestampMillis' field.
      * @param value The value of 'aTimestampMillis'.
      * @return This builder.
      */
    public dove.LogicalTypes.Builder setATimestampMillis(org.joda.time.DateTime value) {
      validate(fields()[8], value);
      this.aTimestampMillis = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'aTimestampMillis' field has been set.
      * @return True if the 'aTimestampMillis' field has been set, false otherwise.
      */
    public boolean hasATimestampMillis() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'aTimestampMillis' field.
      * @return This builder.
      */
    public dove.LogicalTypes.Builder clearATimestampMillis() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'aTimestampMillisInt' field.
      * @return The value.
      */
    public org.joda.time.DateTime getATimestampMillisInt() {
      return aTimestampMillisInt;
    }

    /**
      * Sets the value of the 'aTimestampMillisInt' field.
      * @param value The value of 'aTimestampMillisInt'.
      * @return This builder.
      */
    public dove.LogicalTypes.Builder setATimestampMillisInt(org.joda.time.DateTime value) {
      validate(fields()[9], value);
      this.aTimestampMillisInt = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'aTimestampMillisInt' field has been set.
      * @return True if the 'aTimestampMillisInt' field has been set, false otherwise.
      */
    public boolean hasATimestampMillisInt() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'aTimestampMillisInt' field.
      * @return This builder.
      */
    public dove.LogicalTypes.Builder clearATimestampMillisInt() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'aTimestampMicrosLong' field.
      * @return The value.
      */
    public java.lang.Long getATimestampMicrosLong() {
      return aTimestampMicrosLong;
    }

    /**
      * Sets the value of the 'aTimestampMicrosLong' field.
      * @param value The value of 'aTimestampMicrosLong'.
      * @return This builder.
      */
    public dove.LogicalTypes.Builder setATimestampMicrosLong(long value) {
      validate(fields()[10], value);
      this.aTimestampMicrosLong = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'aTimestampMicrosLong' field has been set.
      * @return True if the 'aTimestampMicrosLong' field has been set, false otherwise.
      */
    public boolean hasATimestampMicrosLong() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'aTimestampMicrosLong' field.
      * @return This builder.
      */
    public dove.LogicalTypes.Builder clearATimestampMicrosLong() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'aDurationBytes' field.
      * @return The value.
      */
    public dove.duration getADurationBytes() {
      return aDurationBytes;
    }

    /**
      * Sets the value of the 'aDurationBytes' field.
      * @param value The value of 'aDurationBytes'.
      * @return This builder.
      */
    public dove.LogicalTypes.Builder setADurationBytes(dove.duration value) {
      validate(fields()[11], value);
      this.aDurationBytes = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'aDurationBytes' field has been set.
      * @return True if the 'aDurationBytes' field has been set, false otherwise.
      */
    public boolean hasADurationBytes() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'aDurationBytes' field.
      * @return This builder.
      */
    public dove.LogicalTypes.Builder clearADurationBytes() {
      aDurationBytes = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public LogicalTypes build() {
      try {
        LogicalTypes record = new LogicalTypes();
        record.aDecimal11 = fieldSetFlags()[0] ? this.aDecimal11 : (java.math.BigDecimal) defaultValue(fields()[0], record.getConversion(0));
        record.aDecimal81 = fieldSetFlags()[1] ? this.aDecimal81 : (java.math.BigDecimal) defaultValue(fields()[1], record.getConversion(1));
        record.aDecimal = fieldSetFlags()[2] ? this.aDecimal : (java.math.BigDecimal) defaultValue(fields()[2], record.getConversion(2));
        record.aDate = fieldSetFlags()[3] ? this.aDate : (org.joda.time.LocalDate) defaultValue(fields()[3], record.getConversion(3));
        record.aDateInt = fieldSetFlags()[4] ? this.aDateInt : (org.joda.time.LocalDate) defaultValue(fields()[4], record.getConversion(4));
        record.aTimeMillis = fieldSetFlags()[5] ? this.aTimeMillis : (org.joda.time.LocalTime) defaultValue(fields()[5], record.getConversion(5));
        record.aTimeMillisInt = fieldSetFlags()[6] ? this.aTimeMillisInt : (org.joda.time.LocalTime) defaultValue(fields()[6], record.getConversion(6));
        record.aTimeMicrosLong = fieldSetFlags()[7] ? this.aTimeMicrosLong : (java.lang.Long) defaultValue(fields()[7], record.getConversion(7));
        record.aTimestampMillis = fieldSetFlags()[8] ? this.aTimestampMillis : (org.joda.time.DateTime) defaultValue(fields()[8], record.getConversion(8));
        record.aTimestampMillisInt = fieldSetFlags()[9] ? this.aTimestampMillisInt : (org.joda.time.DateTime) defaultValue(fields()[9], record.getConversion(9));
        record.aTimestampMicrosLong = fieldSetFlags()[10] ? this.aTimestampMicrosLong : (java.lang.Long) defaultValue(fields()[10], record.getConversion(10));
        record.aDurationBytes = fieldSetFlags()[11] ? this.aDurationBytes : (dove.duration) defaultValue(fields()[11], record.getConversion(11));
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<LogicalTypes>
    WRITER$ = (org.apache.avro.io.DatumWriter<LogicalTypes>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<LogicalTypes>
    READER$ = (org.apache.avro.io.DatumReader<LogicalTypes>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
