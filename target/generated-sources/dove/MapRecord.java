/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package dove;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class MapRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3830782679464814285L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MapRecord\",\"namespace\":\"dove\",\"fields\":[{\"name\":\"mapNull\",\"type\":{\"type\":\"map\",\"values\":\"null\"}},{\"name\":\"mapBoolean\",\"type\":{\"type\":\"map\",\"values\":\"boolean\"}},{\"name\":\"mapInt\",\"type\":{\"type\":\"map\",\"values\":\"int\"}},{\"name\":\"mapLong\",\"type\":{\"type\":\"map\",\"values\":\"long\"}},{\"name\":\"mapFloat\",\"type\":{\"type\":\"map\",\"values\":\"float\"}},{\"name\":\"mapDouble\",\"type\":{\"type\":\"map\",\"values\":\"double\"}},{\"name\":\"mapBytes\",\"type\":{\"type\":\"map\",\"values\":\"bytes\"}},{\"name\":\"mapString\",\"type\":{\"type\":\"map\",\"values\":\"string\"}},{\"name\":\"mapSomeEnum\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"enum\",\"name\":\"SomeEnum\",\"symbols\":[\"ONE\",\"Two\",\"three\"]}}},{\"name\":\"mapEmptyRecord\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"record\",\"name\":\"EmptyRecord\",\"fields\":[]}}},{\"name\":\"mapFixed8\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"fixed\",\"name\":\"Fixed8\",\"size\":8}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<MapRecord> ENCODER =
      new BinaryMessageEncoder<MapRecord>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<MapRecord> DECODER =
      new BinaryMessageDecoder<MapRecord>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<MapRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<MapRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<MapRecord>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this MapRecord to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a MapRecord from a ByteBuffer. */
  public static MapRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.Void> mapNull;
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.Boolean> mapBoolean;
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.Integer> mapInt;
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.Long> mapLong;
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.Float> mapFloat;
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.Double> mapDouble;
  @Deprecated public java.util.Map<java.lang.CharSequence,java.nio.ByteBuffer> mapBytes;
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> mapString;
  @Deprecated public java.util.Map<java.lang.CharSequence,dove.SomeEnum> mapSomeEnum;
  @Deprecated public java.util.Map<java.lang.CharSequence,dove.EmptyRecord> mapEmptyRecord;
  @Deprecated public java.util.Map<java.lang.CharSequence,dove.Fixed8> mapFixed8;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MapRecord() {}

  /**
   * All-args constructor.
   * @param mapNull The new value for mapNull
   * @param mapBoolean The new value for mapBoolean
   * @param mapInt The new value for mapInt
   * @param mapLong The new value for mapLong
   * @param mapFloat The new value for mapFloat
   * @param mapDouble The new value for mapDouble
   * @param mapBytes The new value for mapBytes
   * @param mapString The new value for mapString
   * @param mapSomeEnum The new value for mapSomeEnum
   * @param mapEmptyRecord The new value for mapEmptyRecord
   * @param mapFixed8 The new value for mapFixed8
   */
  public MapRecord(java.util.Map<java.lang.CharSequence,java.lang.Void> mapNull, java.util.Map<java.lang.CharSequence,java.lang.Boolean> mapBoolean, java.util.Map<java.lang.CharSequence,java.lang.Integer> mapInt, java.util.Map<java.lang.CharSequence,java.lang.Long> mapLong, java.util.Map<java.lang.CharSequence,java.lang.Float> mapFloat, java.util.Map<java.lang.CharSequence,java.lang.Double> mapDouble, java.util.Map<java.lang.CharSequence,java.nio.ByteBuffer> mapBytes, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> mapString, java.util.Map<java.lang.CharSequence,dove.SomeEnum> mapSomeEnum, java.util.Map<java.lang.CharSequence,dove.EmptyRecord> mapEmptyRecord, java.util.Map<java.lang.CharSequence,dove.Fixed8> mapFixed8) {
    this.mapNull = mapNull;
    this.mapBoolean = mapBoolean;
    this.mapInt = mapInt;
    this.mapLong = mapLong;
    this.mapFloat = mapFloat;
    this.mapDouble = mapDouble;
    this.mapBytes = mapBytes;
    this.mapString = mapString;
    this.mapSomeEnum = mapSomeEnum;
    this.mapEmptyRecord = mapEmptyRecord;
    this.mapFixed8 = mapFixed8;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return mapNull;
    case 1: return mapBoolean;
    case 2: return mapInt;
    case 3: return mapLong;
    case 4: return mapFloat;
    case 5: return mapDouble;
    case 6: return mapBytes;
    case 7: return mapString;
    case 8: return mapSomeEnum;
    case 9: return mapEmptyRecord;
    case 10: return mapFixed8;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: mapNull = (java.util.Map<java.lang.CharSequence,java.lang.Void>)value$; break;
    case 1: mapBoolean = (java.util.Map<java.lang.CharSequence,java.lang.Boolean>)value$; break;
    case 2: mapInt = (java.util.Map<java.lang.CharSequence,java.lang.Integer>)value$; break;
    case 3: mapLong = (java.util.Map<java.lang.CharSequence,java.lang.Long>)value$; break;
    case 4: mapFloat = (java.util.Map<java.lang.CharSequence,java.lang.Float>)value$; break;
    case 5: mapDouble = (java.util.Map<java.lang.CharSequence,java.lang.Double>)value$; break;
    case 6: mapBytes = (java.util.Map<java.lang.CharSequence,java.nio.ByteBuffer>)value$; break;
    case 7: mapString = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    case 8: mapSomeEnum = (java.util.Map<java.lang.CharSequence,dove.SomeEnum>)value$; break;
    case 9: mapEmptyRecord = (java.util.Map<java.lang.CharSequence,dove.EmptyRecord>)value$; break;
    case 10: mapFixed8 = (java.util.Map<java.lang.CharSequence,dove.Fixed8>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'mapNull' field.
   * @return The value of the 'mapNull' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.Void> getMapNull() {
    return mapNull;
  }

  /**
   * Sets the value of the 'mapNull' field.
   * @param value the value to set.
   */
  public void setMapNull(java.util.Map<java.lang.CharSequence,java.lang.Void> value) {
    this.mapNull = value;
  }

  /**
   * Gets the value of the 'mapBoolean' field.
   * @return The value of the 'mapBoolean' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.Boolean> getMapBoolean() {
    return mapBoolean;
  }

  /**
   * Sets the value of the 'mapBoolean' field.
   * @param value the value to set.
   */
  public void setMapBoolean(java.util.Map<java.lang.CharSequence,java.lang.Boolean> value) {
    this.mapBoolean = value;
  }

  /**
   * Gets the value of the 'mapInt' field.
   * @return The value of the 'mapInt' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.Integer> getMapInt() {
    return mapInt;
  }

  /**
   * Sets the value of the 'mapInt' field.
   * @param value the value to set.
   */
  public void setMapInt(java.util.Map<java.lang.CharSequence,java.lang.Integer> value) {
    this.mapInt = value;
  }

  /**
   * Gets the value of the 'mapLong' field.
   * @return The value of the 'mapLong' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.Long> getMapLong() {
    return mapLong;
  }

  /**
   * Sets the value of the 'mapLong' field.
   * @param value the value to set.
   */
  public void setMapLong(java.util.Map<java.lang.CharSequence,java.lang.Long> value) {
    this.mapLong = value;
  }

  /**
   * Gets the value of the 'mapFloat' field.
   * @return The value of the 'mapFloat' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.Float> getMapFloat() {
    return mapFloat;
  }

  /**
   * Sets the value of the 'mapFloat' field.
   * @param value the value to set.
   */
  public void setMapFloat(java.util.Map<java.lang.CharSequence,java.lang.Float> value) {
    this.mapFloat = value;
  }

  /**
   * Gets the value of the 'mapDouble' field.
   * @return The value of the 'mapDouble' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.Double> getMapDouble() {
    return mapDouble;
  }

  /**
   * Sets the value of the 'mapDouble' field.
   * @param value the value to set.
   */
  public void setMapDouble(java.util.Map<java.lang.CharSequence,java.lang.Double> value) {
    this.mapDouble = value;
  }

  /**
   * Gets the value of the 'mapBytes' field.
   * @return The value of the 'mapBytes' field.
   */
  public java.util.Map<java.lang.CharSequence,java.nio.ByteBuffer> getMapBytes() {
    return mapBytes;
  }

  /**
   * Sets the value of the 'mapBytes' field.
   * @param value the value to set.
   */
  public void setMapBytes(java.util.Map<java.lang.CharSequence,java.nio.ByteBuffer> value) {
    this.mapBytes = value;
  }

  /**
   * Gets the value of the 'mapString' field.
   * @return The value of the 'mapString' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getMapString() {
    return mapString;
  }

  /**
   * Sets the value of the 'mapString' field.
   * @param value the value to set.
   */
  public void setMapString(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.mapString = value;
  }

  /**
   * Gets the value of the 'mapSomeEnum' field.
   * @return The value of the 'mapSomeEnum' field.
   */
  public java.util.Map<java.lang.CharSequence,dove.SomeEnum> getMapSomeEnum() {
    return mapSomeEnum;
  }

  /**
   * Sets the value of the 'mapSomeEnum' field.
   * @param value the value to set.
   */
  public void setMapSomeEnum(java.util.Map<java.lang.CharSequence,dove.SomeEnum> value) {
    this.mapSomeEnum = value;
  }

  /**
   * Gets the value of the 'mapEmptyRecord' field.
   * @return The value of the 'mapEmptyRecord' field.
   */
  public java.util.Map<java.lang.CharSequence,dove.EmptyRecord> getMapEmptyRecord() {
    return mapEmptyRecord;
  }

  /**
   * Sets the value of the 'mapEmptyRecord' field.
   * @param value the value to set.
   */
  public void setMapEmptyRecord(java.util.Map<java.lang.CharSequence,dove.EmptyRecord> value) {
    this.mapEmptyRecord = value;
  }

  /**
   * Gets the value of the 'mapFixed8' field.
   * @return The value of the 'mapFixed8' field.
   */
  public java.util.Map<java.lang.CharSequence,dove.Fixed8> getMapFixed8() {
    return mapFixed8;
  }

  /**
   * Sets the value of the 'mapFixed8' field.
   * @param value the value to set.
   */
  public void setMapFixed8(java.util.Map<java.lang.CharSequence,dove.Fixed8> value) {
    this.mapFixed8 = value;
  }

  /**
   * Creates a new MapRecord RecordBuilder.
   * @return A new MapRecord RecordBuilder
   */
  public static dove.MapRecord.Builder newBuilder() {
    return new dove.MapRecord.Builder();
  }

  /**
   * Creates a new MapRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MapRecord RecordBuilder
   */
  public static dove.MapRecord.Builder newBuilder(dove.MapRecord.Builder other) {
    return new dove.MapRecord.Builder(other);
  }

  /**
   * Creates a new MapRecord RecordBuilder by copying an existing MapRecord instance.
   * @param other The existing instance to copy.
   * @return A new MapRecord RecordBuilder
   */
  public static dove.MapRecord.Builder newBuilder(dove.MapRecord other) {
    return new dove.MapRecord.Builder(other);
  }

  /**
   * RecordBuilder for MapRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MapRecord>
    implements org.apache.avro.data.RecordBuilder<MapRecord> {

    private java.util.Map<java.lang.CharSequence,java.lang.Void> mapNull;
    private java.util.Map<java.lang.CharSequence,java.lang.Boolean> mapBoolean;
    private java.util.Map<java.lang.CharSequence,java.lang.Integer> mapInt;
    private java.util.Map<java.lang.CharSequence,java.lang.Long> mapLong;
    private java.util.Map<java.lang.CharSequence,java.lang.Float> mapFloat;
    private java.util.Map<java.lang.CharSequence,java.lang.Double> mapDouble;
    private java.util.Map<java.lang.CharSequence,java.nio.ByteBuffer> mapBytes;
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> mapString;
    private java.util.Map<java.lang.CharSequence,dove.SomeEnum> mapSomeEnum;
    private java.util.Map<java.lang.CharSequence,dove.EmptyRecord> mapEmptyRecord;
    private java.util.Map<java.lang.CharSequence,dove.Fixed8> mapFixed8;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(dove.MapRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.mapNull)) {
        this.mapNull = data().deepCopy(fields()[0].schema(), other.mapNull);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.mapBoolean)) {
        this.mapBoolean = data().deepCopy(fields()[1].schema(), other.mapBoolean);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.mapInt)) {
        this.mapInt = data().deepCopy(fields()[2].schema(), other.mapInt);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.mapLong)) {
        this.mapLong = data().deepCopy(fields()[3].schema(), other.mapLong);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.mapFloat)) {
        this.mapFloat = data().deepCopy(fields()[4].schema(), other.mapFloat);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.mapDouble)) {
        this.mapDouble = data().deepCopy(fields()[5].schema(), other.mapDouble);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.mapBytes)) {
        this.mapBytes = data().deepCopy(fields()[6].schema(), other.mapBytes);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.mapString)) {
        this.mapString = data().deepCopy(fields()[7].schema(), other.mapString);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.mapSomeEnum)) {
        this.mapSomeEnum = data().deepCopy(fields()[8].schema(), other.mapSomeEnum);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.mapEmptyRecord)) {
        this.mapEmptyRecord = data().deepCopy(fields()[9].schema(), other.mapEmptyRecord);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.mapFixed8)) {
        this.mapFixed8 = data().deepCopy(fields()[10].schema(), other.mapFixed8);
        fieldSetFlags()[10] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing MapRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(dove.MapRecord other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.mapNull)) {
        this.mapNull = data().deepCopy(fields()[0].schema(), other.mapNull);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.mapBoolean)) {
        this.mapBoolean = data().deepCopy(fields()[1].schema(), other.mapBoolean);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.mapInt)) {
        this.mapInt = data().deepCopy(fields()[2].schema(), other.mapInt);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.mapLong)) {
        this.mapLong = data().deepCopy(fields()[3].schema(), other.mapLong);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.mapFloat)) {
        this.mapFloat = data().deepCopy(fields()[4].schema(), other.mapFloat);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.mapDouble)) {
        this.mapDouble = data().deepCopy(fields()[5].schema(), other.mapDouble);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.mapBytes)) {
        this.mapBytes = data().deepCopy(fields()[6].schema(), other.mapBytes);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.mapString)) {
        this.mapString = data().deepCopy(fields()[7].schema(), other.mapString);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.mapSomeEnum)) {
        this.mapSomeEnum = data().deepCopy(fields()[8].schema(), other.mapSomeEnum);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.mapEmptyRecord)) {
        this.mapEmptyRecord = data().deepCopy(fields()[9].schema(), other.mapEmptyRecord);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.mapFixed8)) {
        this.mapFixed8 = data().deepCopy(fields()[10].schema(), other.mapFixed8);
        fieldSetFlags()[10] = true;
      }
    }

    /**
      * Gets the value of the 'mapNull' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.Void> getMapNull() {
      return mapNull;
    }

    /**
      * Sets the value of the 'mapNull' field.
      * @param value The value of 'mapNull'.
      * @return This builder.
      */
    public dove.MapRecord.Builder setMapNull(java.util.Map<java.lang.CharSequence,java.lang.Void> value) {
      validate(fields()[0], value);
      this.mapNull = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'mapNull' field has been set.
      * @return True if the 'mapNull' field has been set, false otherwise.
      */
    public boolean hasMapNull() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'mapNull' field.
      * @return This builder.
      */
    public dove.MapRecord.Builder clearMapNull() {
      mapNull = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'mapBoolean' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.Boolean> getMapBoolean() {
      return mapBoolean;
    }

    /**
      * Sets the value of the 'mapBoolean' field.
      * @param value The value of 'mapBoolean'.
      * @return This builder.
      */
    public dove.MapRecord.Builder setMapBoolean(java.util.Map<java.lang.CharSequence,java.lang.Boolean> value) {
      validate(fields()[1], value);
      this.mapBoolean = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'mapBoolean' field has been set.
      * @return True if the 'mapBoolean' field has been set, false otherwise.
      */
    public boolean hasMapBoolean() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'mapBoolean' field.
      * @return This builder.
      */
    public dove.MapRecord.Builder clearMapBoolean() {
      mapBoolean = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'mapInt' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.Integer> getMapInt() {
      return mapInt;
    }

    /**
      * Sets the value of the 'mapInt' field.
      * @param value The value of 'mapInt'.
      * @return This builder.
      */
    public dove.MapRecord.Builder setMapInt(java.util.Map<java.lang.CharSequence,java.lang.Integer> value) {
      validate(fields()[2], value);
      this.mapInt = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'mapInt' field has been set.
      * @return True if the 'mapInt' field has been set, false otherwise.
      */
    public boolean hasMapInt() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'mapInt' field.
      * @return This builder.
      */
    public dove.MapRecord.Builder clearMapInt() {
      mapInt = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'mapLong' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.Long> getMapLong() {
      return mapLong;
    }

    /**
      * Sets the value of the 'mapLong' field.
      * @param value The value of 'mapLong'.
      * @return This builder.
      */
    public dove.MapRecord.Builder setMapLong(java.util.Map<java.lang.CharSequence,java.lang.Long> value) {
      validate(fields()[3], value);
      this.mapLong = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'mapLong' field has been set.
      * @return True if the 'mapLong' field has been set, false otherwise.
      */
    public boolean hasMapLong() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'mapLong' field.
      * @return This builder.
      */
    public dove.MapRecord.Builder clearMapLong() {
      mapLong = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'mapFloat' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.Float> getMapFloat() {
      return mapFloat;
    }

    /**
      * Sets the value of the 'mapFloat' field.
      * @param value The value of 'mapFloat'.
      * @return This builder.
      */
    public dove.MapRecord.Builder setMapFloat(java.util.Map<java.lang.CharSequence,java.lang.Float> value) {
      validate(fields()[4], value);
      this.mapFloat = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'mapFloat' field has been set.
      * @return True if the 'mapFloat' field has been set, false otherwise.
      */
    public boolean hasMapFloat() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'mapFloat' field.
      * @return This builder.
      */
    public dove.MapRecord.Builder clearMapFloat() {
      mapFloat = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'mapDouble' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.Double> getMapDouble() {
      return mapDouble;
    }

    /**
      * Sets the value of the 'mapDouble' field.
      * @param value The value of 'mapDouble'.
      * @return This builder.
      */
    public dove.MapRecord.Builder setMapDouble(java.util.Map<java.lang.CharSequence,java.lang.Double> value) {
      validate(fields()[5], value);
      this.mapDouble = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'mapDouble' field has been set.
      * @return True if the 'mapDouble' field has been set, false otherwise.
      */
    public boolean hasMapDouble() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'mapDouble' field.
      * @return This builder.
      */
    public dove.MapRecord.Builder clearMapDouble() {
      mapDouble = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'mapBytes' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.nio.ByteBuffer> getMapBytes() {
      return mapBytes;
    }

    /**
      * Sets the value of the 'mapBytes' field.
      * @param value The value of 'mapBytes'.
      * @return This builder.
      */
    public dove.MapRecord.Builder setMapBytes(java.util.Map<java.lang.CharSequence,java.nio.ByteBuffer> value) {
      validate(fields()[6], value);
      this.mapBytes = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'mapBytes' field has been set.
      * @return True if the 'mapBytes' field has been set, false otherwise.
      */
    public boolean hasMapBytes() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'mapBytes' field.
      * @return This builder.
      */
    public dove.MapRecord.Builder clearMapBytes() {
      mapBytes = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'mapString' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getMapString() {
      return mapString;
    }

    /**
      * Sets the value of the 'mapString' field.
      * @param value The value of 'mapString'.
      * @return This builder.
      */
    public dove.MapRecord.Builder setMapString(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[7], value);
      this.mapString = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'mapString' field has been set.
      * @return True if the 'mapString' field has been set, false otherwise.
      */
    public boolean hasMapString() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'mapString' field.
      * @return This builder.
      */
    public dove.MapRecord.Builder clearMapString() {
      mapString = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'mapSomeEnum' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,dove.SomeEnum> getMapSomeEnum() {
      return mapSomeEnum;
    }

    /**
      * Sets the value of the 'mapSomeEnum' field.
      * @param value The value of 'mapSomeEnum'.
      * @return This builder.
      */
    public dove.MapRecord.Builder setMapSomeEnum(java.util.Map<java.lang.CharSequence,dove.SomeEnum> value) {
      validate(fields()[8], value);
      this.mapSomeEnum = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'mapSomeEnum' field has been set.
      * @return True if the 'mapSomeEnum' field has been set, false otherwise.
      */
    public boolean hasMapSomeEnum() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'mapSomeEnum' field.
      * @return This builder.
      */
    public dove.MapRecord.Builder clearMapSomeEnum() {
      mapSomeEnum = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'mapEmptyRecord' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,dove.EmptyRecord> getMapEmptyRecord() {
      return mapEmptyRecord;
    }

    /**
      * Sets the value of the 'mapEmptyRecord' field.
      * @param value The value of 'mapEmptyRecord'.
      * @return This builder.
      */
    public dove.MapRecord.Builder setMapEmptyRecord(java.util.Map<java.lang.CharSequence,dove.EmptyRecord> value) {
      validate(fields()[9], value);
      this.mapEmptyRecord = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'mapEmptyRecord' field has been set.
      * @return True if the 'mapEmptyRecord' field has been set, false otherwise.
      */
    public boolean hasMapEmptyRecord() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'mapEmptyRecord' field.
      * @return This builder.
      */
    public dove.MapRecord.Builder clearMapEmptyRecord() {
      mapEmptyRecord = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'mapFixed8' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,dove.Fixed8> getMapFixed8() {
      return mapFixed8;
    }

    /**
      * Sets the value of the 'mapFixed8' field.
      * @param value The value of 'mapFixed8'.
      * @return This builder.
      */
    public dove.MapRecord.Builder setMapFixed8(java.util.Map<java.lang.CharSequence,dove.Fixed8> value) {
      validate(fields()[10], value);
      this.mapFixed8 = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'mapFixed8' field has been set.
      * @return True if the 'mapFixed8' field has been set, false otherwise.
      */
    public boolean hasMapFixed8() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'mapFixed8' field.
      * @return This builder.
      */
    public dove.MapRecord.Builder clearMapFixed8() {
      mapFixed8 = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public MapRecord build() {
      try {
        MapRecord record = new MapRecord();
        record.mapNull = fieldSetFlags()[0] ? this.mapNull : (java.util.Map<java.lang.CharSequence,java.lang.Void>) defaultValue(fields()[0]);
        record.mapBoolean = fieldSetFlags()[1] ? this.mapBoolean : (java.util.Map<java.lang.CharSequence,java.lang.Boolean>) defaultValue(fields()[1]);
        record.mapInt = fieldSetFlags()[2] ? this.mapInt : (java.util.Map<java.lang.CharSequence,java.lang.Integer>) defaultValue(fields()[2]);
        record.mapLong = fieldSetFlags()[3] ? this.mapLong : (java.util.Map<java.lang.CharSequence,java.lang.Long>) defaultValue(fields()[3]);
        record.mapFloat = fieldSetFlags()[4] ? this.mapFloat : (java.util.Map<java.lang.CharSequence,java.lang.Float>) defaultValue(fields()[4]);
        record.mapDouble = fieldSetFlags()[5] ? this.mapDouble : (java.util.Map<java.lang.CharSequence,java.lang.Double>) defaultValue(fields()[5]);
        record.mapBytes = fieldSetFlags()[6] ? this.mapBytes : (java.util.Map<java.lang.CharSequence,java.nio.ByteBuffer>) defaultValue(fields()[6]);
        record.mapString = fieldSetFlags()[7] ? this.mapString : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[7]);
        record.mapSomeEnum = fieldSetFlags()[8] ? this.mapSomeEnum : (java.util.Map<java.lang.CharSequence,dove.SomeEnum>) defaultValue(fields()[8]);
        record.mapEmptyRecord = fieldSetFlags()[9] ? this.mapEmptyRecord : (java.util.Map<java.lang.CharSequence,dove.EmptyRecord>) defaultValue(fields()[9]);
        record.mapFixed8 = fieldSetFlags()[10] ? this.mapFixed8 : (java.util.Map<java.lang.CharSequence,dove.Fixed8>) defaultValue(fields()[10]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<MapRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<MapRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<MapRecord>
    READER$ = (org.apache.avro.io.DatumReader<MapRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
