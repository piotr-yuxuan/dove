/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package dove;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ParentRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6317045036555896420L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ParentRecord\",\"namespace\":\"dove\",\"fields\":[{\"name\":\"child\",\"type\":{\"type\":\"record\",\"name\":\"PrimitiveTypes\",\"fields\":[{\"name\":\"aNull\",\"type\":\"null\"},{\"name\":\"aBoolean\",\"type\":\"boolean\"},{\"name\":\"aInt\",\"type\":\"int\"},{\"name\":\"aLong\",\"type\":\"long\"},{\"name\":\"aFloat\",\"type\":\"float\"},{\"name\":\"aDouble\",\"type\":\"double\"},{\"name\":\"aBytes\",\"type\":\"bytes\"},{\"name\":\"aString\",\"type\":\"string\"}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ParentRecord> ENCODER =
      new BinaryMessageEncoder<ParentRecord>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ParentRecord> DECODER =
      new BinaryMessageDecoder<ParentRecord>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<ParentRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<ParentRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ParentRecord>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this ParentRecord to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a ParentRecord from a ByteBuffer. */
  public static ParentRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public dove.PrimitiveTypes child;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ParentRecord() {}

  /**
   * All-args constructor.
   * @param child The new value for child
   */
  public ParentRecord(dove.PrimitiveTypes child) {
    this.child = child;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return child;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: child = (dove.PrimitiveTypes)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'child' field.
   * @return The value of the 'child' field.
   */
  public dove.PrimitiveTypes getChild() {
    return child;
  }

  /**
   * Sets the value of the 'child' field.
   * @param value the value to set.
   */
  public void setChild(dove.PrimitiveTypes value) {
    this.child = value;
  }

  /**
   * Creates a new ParentRecord RecordBuilder.
   * @return A new ParentRecord RecordBuilder
   */
  public static dove.ParentRecord.Builder newBuilder() {
    return new dove.ParentRecord.Builder();
  }

  /**
   * Creates a new ParentRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ParentRecord RecordBuilder
   */
  public static dove.ParentRecord.Builder newBuilder(dove.ParentRecord.Builder other) {
    return new dove.ParentRecord.Builder(other);
  }

  /**
   * Creates a new ParentRecord RecordBuilder by copying an existing ParentRecord instance.
   * @param other The existing instance to copy.
   * @return A new ParentRecord RecordBuilder
   */
  public static dove.ParentRecord.Builder newBuilder(dove.ParentRecord other) {
    return new dove.ParentRecord.Builder(other);
  }

  /**
   * RecordBuilder for ParentRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ParentRecord>
    implements org.apache.avro.data.RecordBuilder<ParentRecord> {

    private dove.PrimitiveTypes child;
    private dove.PrimitiveTypes.Builder childBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(dove.ParentRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.child)) {
        this.child = data().deepCopy(fields()[0].schema(), other.child);
        fieldSetFlags()[0] = true;
      }
      if (other.hasChildBuilder()) {
        this.childBuilder = dove.PrimitiveTypes.newBuilder(other.getChildBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing ParentRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(dove.ParentRecord other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.child)) {
        this.child = data().deepCopy(fields()[0].schema(), other.child);
        fieldSetFlags()[0] = true;
      }
      this.childBuilder = null;
    }

    /**
      * Gets the value of the 'child' field.
      * @return The value.
      */
    public dove.PrimitiveTypes getChild() {
      return child;
    }

    /**
      * Sets the value of the 'child' field.
      * @param value The value of 'child'.
      * @return This builder.
      */
    public dove.ParentRecord.Builder setChild(dove.PrimitiveTypes value) {
      validate(fields()[0], value);
      this.childBuilder = null;
      this.child = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'child' field has been set.
      * @return True if the 'child' field has been set, false otherwise.
      */
    public boolean hasChild() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'child' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public dove.PrimitiveTypes.Builder getChildBuilder() {
      if (childBuilder == null) {
        if (hasChild()) {
          setChildBuilder(dove.PrimitiveTypes.newBuilder(child));
        } else {
          setChildBuilder(dove.PrimitiveTypes.newBuilder());
        }
      }
      return childBuilder;
    }

    /**
     * Sets the Builder instance for the 'child' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public dove.ParentRecord.Builder setChildBuilder(dove.PrimitiveTypes.Builder value) {
      clearChild();
      childBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'child' field has an active Builder instance
     * @return True if the 'child' field has an active Builder instance
     */
    public boolean hasChildBuilder() {
      return childBuilder != null;
    }

    /**
      * Clears the value of the 'child' field.
      * @return This builder.
      */
    public dove.ParentRecord.Builder clearChild() {
      child = null;
      childBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ParentRecord build() {
      try {
        ParentRecord record = new ParentRecord();
        if (childBuilder != null) {
          record.child = this.childBuilder.build();
        } else {
          record.child = fieldSetFlags()[0] ? this.child : (dove.PrimitiveTypes) defaultValue(fields()[0]);
        }
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ParentRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<ParentRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ParentRecord>
    READER$ = (org.apache.avro.io.DatumReader<ParentRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
