/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package dove;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class PrimitiveTypes extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6880669085098615363L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PrimitiveTypes\",\"namespace\":\"dove\",\"fields\":[{\"name\":\"aNull\",\"type\":\"null\"},{\"name\":\"aBoolean\",\"type\":\"boolean\"},{\"name\":\"aInt\",\"type\":\"int\"},{\"name\":\"aLong\",\"type\":\"long\"},{\"name\":\"aFloat\",\"type\":\"float\"},{\"name\":\"aDouble\",\"type\":\"double\"},{\"name\":\"aBytes\",\"type\":\"bytes\"},{\"name\":\"aString\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PrimitiveTypes> ENCODER =
      new BinaryMessageEncoder<PrimitiveTypes>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PrimitiveTypes> DECODER =
      new BinaryMessageDecoder<PrimitiveTypes>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<PrimitiveTypes> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<PrimitiveTypes> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<PrimitiveTypes>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this PrimitiveTypes to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a PrimitiveTypes from a ByteBuffer. */
  public static PrimitiveTypes fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.Void aNull;
  @Deprecated public boolean aBoolean;
  @Deprecated public int aInt;
  @Deprecated public long aLong;
  @Deprecated public float aFloat;
  @Deprecated public double aDouble;
  @Deprecated public java.nio.ByteBuffer aBytes;
  @Deprecated public java.lang.CharSequence aString;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PrimitiveTypes() {}

  /**
   * All-args constructor.
   * @param aNull The new value for aNull
   * @param aBoolean The new value for aBoolean
   * @param aInt The new value for aInt
   * @param aLong The new value for aLong
   * @param aFloat The new value for aFloat
   * @param aDouble The new value for aDouble
   * @param aBytes The new value for aBytes
   * @param aString The new value for aString
   */
  public PrimitiveTypes(java.lang.Void aNull, java.lang.Boolean aBoolean, java.lang.Integer aInt, java.lang.Long aLong, java.lang.Float aFloat, java.lang.Double aDouble, java.nio.ByteBuffer aBytes, java.lang.CharSequence aString) {
    this.aNull = aNull;
    this.aBoolean = aBoolean;
    this.aInt = aInt;
    this.aLong = aLong;
    this.aFloat = aFloat;
    this.aDouble = aDouble;
    this.aBytes = aBytes;
    this.aString = aString;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return aNull;
    case 1: return aBoolean;
    case 2: return aInt;
    case 3: return aLong;
    case 4: return aFloat;
    case 5: return aDouble;
    case 6: return aBytes;
    case 7: return aString;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: aNull = (java.lang.Void)value$; break;
    case 1: aBoolean = (java.lang.Boolean)value$; break;
    case 2: aInt = (java.lang.Integer)value$; break;
    case 3: aLong = (java.lang.Long)value$; break;
    case 4: aFloat = (java.lang.Float)value$; break;
    case 5: aDouble = (java.lang.Double)value$; break;
    case 6: aBytes = (java.nio.ByteBuffer)value$; break;
    case 7: aString = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'aNull' field.
   * @return The value of the 'aNull' field.
   */
  public java.lang.Void getANull() {
    return aNull;
  }

  /**
   * Sets the value of the 'aNull' field.
   * @param value the value to set.
   */
  public void setANull(java.lang.Void value) {
    this.aNull = value;
  }

  /**
   * Gets the value of the 'aBoolean' field.
   * @return The value of the 'aBoolean' field.
   */
  public java.lang.Boolean getABoolean() {
    return aBoolean;
  }

  /**
   * Sets the value of the 'aBoolean' field.
   * @param value the value to set.
   */
  public void setABoolean(java.lang.Boolean value) {
    this.aBoolean = value;
  }

  /**
   * Gets the value of the 'aInt' field.
   * @return The value of the 'aInt' field.
   */
  public java.lang.Integer getAInt() {
    return aInt;
  }

  /**
   * Sets the value of the 'aInt' field.
   * @param value the value to set.
   */
  public void setAInt(java.lang.Integer value) {
    this.aInt = value;
  }

  /**
   * Gets the value of the 'aLong' field.
   * @return The value of the 'aLong' field.
   */
  public java.lang.Long getALong() {
    return aLong;
  }

  /**
   * Sets the value of the 'aLong' field.
   * @param value the value to set.
   */
  public void setALong(java.lang.Long value) {
    this.aLong = value;
  }

  /**
   * Gets the value of the 'aFloat' field.
   * @return The value of the 'aFloat' field.
   */
  public java.lang.Float getAFloat() {
    return aFloat;
  }

  /**
   * Sets the value of the 'aFloat' field.
   * @param value the value to set.
   */
  public void setAFloat(java.lang.Float value) {
    this.aFloat = value;
  }

  /**
   * Gets the value of the 'aDouble' field.
   * @return The value of the 'aDouble' field.
   */
  public java.lang.Double getADouble() {
    return aDouble;
  }

  /**
   * Sets the value of the 'aDouble' field.
   * @param value the value to set.
   */
  public void setADouble(java.lang.Double value) {
    this.aDouble = value;
  }

  /**
   * Gets the value of the 'aBytes' field.
   * @return The value of the 'aBytes' field.
   */
  public java.nio.ByteBuffer getABytes() {
    return aBytes;
  }

  /**
   * Sets the value of the 'aBytes' field.
   * @param value the value to set.
   */
  public void setABytes(java.nio.ByteBuffer value) {
    this.aBytes = value;
  }

  /**
   * Gets the value of the 'aString' field.
   * @return The value of the 'aString' field.
   */
  public java.lang.CharSequence getAString() {
    return aString;
  }

  /**
   * Sets the value of the 'aString' field.
   * @param value the value to set.
   */
  public void setAString(java.lang.CharSequence value) {
    this.aString = value;
  }

  /**
   * Creates a new PrimitiveTypes RecordBuilder.
   * @return A new PrimitiveTypes RecordBuilder
   */
  public static dove.PrimitiveTypes.Builder newBuilder() {
    return new dove.PrimitiveTypes.Builder();
  }

  /**
   * Creates a new PrimitiveTypes RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PrimitiveTypes RecordBuilder
   */
  public static dove.PrimitiveTypes.Builder newBuilder(dove.PrimitiveTypes.Builder other) {
    return new dove.PrimitiveTypes.Builder(other);
  }

  /**
   * Creates a new PrimitiveTypes RecordBuilder by copying an existing PrimitiveTypes instance.
   * @param other The existing instance to copy.
   * @return A new PrimitiveTypes RecordBuilder
   */
  public static dove.PrimitiveTypes.Builder newBuilder(dove.PrimitiveTypes other) {
    return new dove.PrimitiveTypes.Builder(other);
  }

  /**
   * RecordBuilder for PrimitiveTypes instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PrimitiveTypes>
    implements org.apache.avro.data.RecordBuilder<PrimitiveTypes> {

    private java.lang.Void aNull;
    private boolean aBoolean;
    private int aInt;
    private long aLong;
    private float aFloat;
    private double aDouble;
    private java.nio.ByteBuffer aBytes;
    private java.lang.CharSequence aString;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(dove.PrimitiveTypes.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.aNull)) {
        this.aNull = data().deepCopy(fields()[0].schema(), other.aNull);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.aBoolean)) {
        this.aBoolean = data().deepCopy(fields()[1].schema(), other.aBoolean);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.aInt)) {
        this.aInt = data().deepCopy(fields()[2].schema(), other.aInt);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.aLong)) {
        this.aLong = data().deepCopy(fields()[3].schema(), other.aLong);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.aFloat)) {
        this.aFloat = data().deepCopy(fields()[4].schema(), other.aFloat);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.aDouble)) {
        this.aDouble = data().deepCopy(fields()[5].schema(), other.aDouble);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.aBytes)) {
        this.aBytes = data().deepCopy(fields()[6].schema(), other.aBytes);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.aString)) {
        this.aString = data().deepCopy(fields()[7].schema(), other.aString);
        fieldSetFlags()[7] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing PrimitiveTypes instance
     * @param other The existing instance to copy.
     */
    private Builder(dove.PrimitiveTypes other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.aNull)) {
        this.aNull = data().deepCopy(fields()[0].schema(), other.aNull);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.aBoolean)) {
        this.aBoolean = data().deepCopy(fields()[1].schema(), other.aBoolean);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.aInt)) {
        this.aInt = data().deepCopy(fields()[2].schema(), other.aInt);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.aLong)) {
        this.aLong = data().deepCopy(fields()[3].schema(), other.aLong);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.aFloat)) {
        this.aFloat = data().deepCopy(fields()[4].schema(), other.aFloat);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.aDouble)) {
        this.aDouble = data().deepCopy(fields()[5].schema(), other.aDouble);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.aBytes)) {
        this.aBytes = data().deepCopy(fields()[6].schema(), other.aBytes);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.aString)) {
        this.aString = data().deepCopy(fields()[7].schema(), other.aString);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'aNull' field.
      * @return The value.
      */
    public java.lang.Void getANull() {
      return aNull;
    }

    /**
      * Sets the value of the 'aNull' field.
      * @param value The value of 'aNull'.
      * @return This builder.
      */
    public dove.PrimitiveTypes.Builder setANull(java.lang.Void value) {
      validate(fields()[0], value);
      this.aNull = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'aNull' field has been set.
      * @return True if the 'aNull' field has been set, false otherwise.
      */
    public boolean hasANull() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'aNull' field.
      * @return This builder.
      */
    public dove.PrimitiveTypes.Builder clearANull() {
      aNull = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'aBoolean' field.
      * @return The value.
      */
    public java.lang.Boolean getABoolean() {
      return aBoolean;
    }

    /**
      * Sets the value of the 'aBoolean' field.
      * @param value The value of 'aBoolean'.
      * @return This builder.
      */
    public dove.PrimitiveTypes.Builder setABoolean(boolean value) {
      validate(fields()[1], value);
      this.aBoolean = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'aBoolean' field has been set.
      * @return True if the 'aBoolean' field has been set, false otherwise.
      */
    public boolean hasABoolean() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'aBoolean' field.
      * @return This builder.
      */
    public dove.PrimitiveTypes.Builder clearABoolean() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'aInt' field.
      * @return The value.
      */
    public java.lang.Integer getAInt() {
      return aInt;
    }

    /**
      * Sets the value of the 'aInt' field.
      * @param value The value of 'aInt'.
      * @return This builder.
      */
    public dove.PrimitiveTypes.Builder setAInt(int value) {
      validate(fields()[2], value);
      this.aInt = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'aInt' field has been set.
      * @return True if the 'aInt' field has been set, false otherwise.
      */
    public boolean hasAInt() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'aInt' field.
      * @return This builder.
      */
    public dove.PrimitiveTypes.Builder clearAInt() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'aLong' field.
      * @return The value.
      */
    public java.lang.Long getALong() {
      return aLong;
    }

    /**
      * Sets the value of the 'aLong' field.
      * @param value The value of 'aLong'.
      * @return This builder.
      */
    public dove.PrimitiveTypes.Builder setALong(long value) {
      validate(fields()[3], value);
      this.aLong = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'aLong' field has been set.
      * @return True if the 'aLong' field has been set, false otherwise.
      */
    public boolean hasALong() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'aLong' field.
      * @return This builder.
      */
    public dove.PrimitiveTypes.Builder clearALong() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'aFloat' field.
      * @return The value.
      */
    public java.lang.Float getAFloat() {
      return aFloat;
    }

    /**
      * Sets the value of the 'aFloat' field.
      * @param value The value of 'aFloat'.
      * @return This builder.
      */
    public dove.PrimitiveTypes.Builder setAFloat(float value) {
      validate(fields()[4], value);
      this.aFloat = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'aFloat' field has been set.
      * @return True if the 'aFloat' field has been set, false otherwise.
      */
    public boolean hasAFloat() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'aFloat' field.
      * @return This builder.
      */
    public dove.PrimitiveTypes.Builder clearAFloat() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'aDouble' field.
      * @return The value.
      */
    public java.lang.Double getADouble() {
      return aDouble;
    }

    /**
      * Sets the value of the 'aDouble' field.
      * @param value The value of 'aDouble'.
      * @return This builder.
      */
    public dove.PrimitiveTypes.Builder setADouble(double value) {
      validate(fields()[5], value);
      this.aDouble = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'aDouble' field has been set.
      * @return True if the 'aDouble' field has been set, false otherwise.
      */
    public boolean hasADouble() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'aDouble' field.
      * @return This builder.
      */
    public dove.PrimitiveTypes.Builder clearADouble() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'aBytes' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getABytes() {
      return aBytes;
    }

    /**
      * Sets the value of the 'aBytes' field.
      * @param value The value of 'aBytes'.
      * @return This builder.
      */
    public dove.PrimitiveTypes.Builder setABytes(java.nio.ByteBuffer value) {
      validate(fields()[6], value);
      this.aBytes = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'aBytes' field has been set.
      * @return True if the 'aBytes' field has been set, false otherwise.
      */
    public boolean hasABytes() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'aBytes' field.
      * @return This builder.
      */
    public dove.PrimitiveTypes.Builder clearABytes() {
      aBytes = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'aString' field.
      * @return The value.
      */
    public java.lang.CharSequence getAString() {
      return aString;
    }

    /**
      * Sets the value of the 'aString' field.
      * @param value The value of 'aString'.
      * @return This builder.
      */
    public dove.PrimitiveTypes.Builder setAString(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.aString = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'aString' field has been set.
      * @return True if the 'aString' field has been set, false otherwise.
      */
    public boolean hasAString() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'aString' field.
      * @return This builder.
      */
    public dove.PrimitiveTypes.Builder clearAString() {
      aString = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PrimitiveTypes build() {
      try {
        PrimitiveTypes record = new PrimitiveTypes();
        record.aNull = fieldSetFlags()[0] ? this.aNull : (java.lang.Void) defaultValue(fields()[0]);
        record.aBoolean = fieldSetFlags()[1] ? this.aBoolean : (java.lang.Boolean) defaultValue(fields()[1]);
        record.aInt = fieldSetFlags()[2] ? this.aInt : (java.lang.Integer) defaultValue(fields()[2]);
        record.aLong = fieldSetFlags()[3] ? this.aLong : (java.lang.Long) defaultValue(fields()[3]);
        record.aFloat = fieldSetFlags()[4] ? this.aFloat : (java.lang.Float) defaultValue(fields()[4]);
        record.aDouble = fieldSetFlags()[5] ? this.aDouble : (java.lang.Double) defaultValue(fields()[5]);
        record.aBytes = fieldSetFlags()[6] ? this.aBytes : (java.nio.ByteBuffer) defaultValue(fields()[6]);
        record.aString = fieldSetFlags()[7] ? this.aString : (java.lang.CharSequence) defaultValue(fields()[7]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PrimitiveTypes>
    WRITER$ = (org.apache.avro.io.DatumWriter<PrimitiveTypes>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PrimitiveTypes>
    READER$ = (org.apache.avro.io.DatumReader<PrimitiveTypes>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
