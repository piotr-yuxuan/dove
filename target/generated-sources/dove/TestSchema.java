/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package dove;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TestSchema extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1852913803340209378L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TestSchema\",\"namespace\":\"dove\",\"fields\":[{\"name\":\"myInt\",\"type\":\"int\"},{\"name\":\"myDefaultInt\",\"type\":\"int\",\"default\":2},{\"name\":\"myBoolean\",\"type\":\"boolean\"},{\"name\":\"a\",\"type\":\"bytes\"},{\"name\":\"weirdUnion\",\"type\":[\"int\",\"null\",\"boolean\"],\"default\":1},{\"name\":\"ids\",\"type\":{\"type\":\"map\",\"values\":\"int\"},\"default\":{}},{\"name\":\"arrayUnion\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"NestedSchema\",\"fields\":[{\"name\":\"nestedIp\",\"type\":[\"null\",{\"type\":\"fixed\",\"name\":\"IPv4\",\"size\":4},{\"type\":\"fixed\",\"name\":\"IPv6\",\"size\":16}],\"default\":null},{\"name\":\"nestedRecursiveArrayUnion\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"NestedSchema\"}],\"default\":null}]}}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TestSchema> ENCODER =
      new BinaryMessageEncoder<TestSchema>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TestSchema> DECODER =
      new BinaryMessageDecoder<TestSchema>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<TestSchema> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<TestSchema> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TestSchema>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this TestSchema to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a TestSchema from a ByteBuffer. */
  public static TestSchema fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public int myInt;
  @Deprecated public int myDefaultInt;
  @Deprecated public boolean myBoolean;
  @Deprecated public java.nio.ByteBuffer a;
  @Deprecated public java.lang.Object weirdUnion;
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.Integer> ids;
  @Deprecated public java.util.List<dove.NestedSchema> arrayUnion;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TestSchema() {}

  /**
   * All-args constructor.
   * @param myInt The new value for myInt
   * @param myDefaultInt The new value for myDefaultInt
   * @param myBoolean The new value for myBoolean
   * @param a The new value for a
   * @param weirdUnion The new value for weirdUnion
   * @param ids The new value for ids
   * @param arrayUnion The new value for arrayUnion
   */
  public TestSchema(java.lang.Integer myInt, java.lang.Integer myDefaultInt, java.lang.Boolean myBoolean, java.nio.ByteBuffer a, java.lang.Object weirdUnion, java.util.Map<java.lang.CharSequence,java.lang.Integer> ids, java.util.List<dove.NestedSchema> arrayUnion) {
    this.myInt = myInt;
    this.myDefaultInt = myDefaultInt;
    this.myBoolean = myBoolean;
    this.a = a;
    this.weirdUnion = weirdUnion;
    this.ids = ids;
    this.arrayUnion = arrayUnion;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return myInt;
    case 1: return myDefaultInt;
    case 2: return myBoolean;
    case 3: return a;
    case 4: return weirdUnion;
    case 5: return ids;
    case 6: return arrayUnion;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: myInt = (java.lang.Integer)value$; break;
    case 1: myDefaultInt = (java.lang.Integer)value$; break;
    case 2: myBoolean = (java.lang.Boolean)value$; break;
    case 3: a = (java.nio.ByteBuffer)value$; break;
    case 4: weirdUnion = (java.lang.Object)value$; break;
    case 5: ids = (java.util.Map<java.lang.CharSequence,java.lang.Integer>)value$; break;
    case 6: arrayUnion = (java.util.List<dove.NestedSchema>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'myInt' field.
   * @return The value of the 'myInt' field.
   */
  public java.lang.Integer getMyInt() {
    return myInt;
  }

  /**
   * Sets the value of the 'myInt' field.
   * @param value the value to set.
   */
  public void setMyInt(java.lang.Integer value) {
    this.myInt = value;
  }

  /**
   * Gets the value of the 'myDefaultInt' field.
   * @return The value of the 'myDefaultInt' field.
   */
  public java.lang.Integer getMyDefaultInt() {
    return myDefaultInt;
  }

  /**
   * Sets the value of the 'myDefaultInt' field.
   * @param value the value to set.
   */
  public void setMyDefaultInt(java.lang.Integer value) {
    this.myDefaultInt = value;
  }

  /**
   * Gets the value of the 'myBoolean' field.
   * @return The value of the 'myBoolean' field.
   */
  public java.lang.Boolean getMyBoolean() {
    return myBoolean;
  }

  /**
   * Sets the value of the 'myBoolean' field.
   * @param value the value to set.
   */
  public void setMyBoolean(java.lang.Boolean value) {
    this.myBoolean = value;
  }

  /**
   * Gets the value of the 'a' field.
   * @return The value of the 'a' field.
   */
  public java.nio.ByteBuffer getA() {
    return a;
  }

  /**
   * Sets the value of the 'a' field.
   * @param value the value to set.
   */
  public void setA(java.nio.ByteBuffer value) {
    this.a = value;
  }

  /**
   * Gets the value of the 'weirdUnion' field.
   * @return The value of the 'weirdUnion' field.
   */
  public java.lang.Object getWeirdUnion() {
    return weirdUnion;
  }

  /**
   * Sets the value of the 'weirdUnion' field.
   * @param value the value to set.
   */
  public void setWeirdUnion(java.lang.Object value) {
    this.weirdUnion = value;
  }

  /**
   * Gets the value of the 'ids' field.
   * @return The value of the 'ids' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.Integer> getIds() {
    return ids;
  }

  /**
   * Sets the value of the 'ids' field.
   * @param value the value to set.
   */
  public void setIds(java.util.Map<java.lang.CharSequence,java.lang.Integer> value) {
    this.ids = value;
  }

  /**
   * Gets the value of the 'arrayUnion' field.
   * @return The value of the 'arrayUnion' field.
   */
  public java.util.List<dove.NestedSchema> getArrayUnion() {
    return arrayUnion;
  }

  /**
   * Sets the value of the 'arrayUnion' field.
   * @param value the value to set.
   */
  public void setArrayUnion(java.util.List<dove.NestedSchema> value) {
    this.arrayUnion = value;
  }

  /**
   * Creates a new TestSchema RecordBuilder.
   * @return A new TestSchema RecordBuilder
   */
  public static dove.TestSchema.Builder newBuilder() {
    return new dove.TestSchema.Builder();
  }

  /**
   * Creates a new TestSchema RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TestSchema RecordBuilder
   */
  public static dove.TestSchema.Builder newBuilder(dove.TestSchema.Builder other) {
    return new dove.TestSchema.Builder(other);
  }

  /**
   * Creates a new TestSchema RecordBuilder by copying an existing TestSchema instance.
   * @param other The existing instance to copy.
   * @return A new TestSchema RecordBuilder
   */
  public static dove.TestSchema.Builder newBuilder(dove.TestSchema other) {
    return new dove.TestSchema.Builder(other);
  }

  /**
   * RecordBuilder for TestSchema instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TestSchema>
    implements org.apache.avro.data.RecordBuilder<TestSchema> {

    private int myInt;
    private int myDefaultInt;
    private boolean myBoolean;
    private java.nio.ByteBuffer a;
    private java.lang.Object weirdUnion;
    private java.util.Map<java.lang.CharSequence,java.lang.Integer> ids;
    private java.util.List<dove.NestedSchema> arrayUnion;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(dove.TestSchema.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.myInt)) {
        this.myInt = data().deepCopy(fields()[0].schema(), other.myInt);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.myDefaultInt)) {
        this.myDefaultInt = data().deepCopy(fields()[1].schema(), other.myDefaultInt);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.myBoolean)) {
        this.myBoolean = data().deepCopy(fields()[2].schema(), other.myBoolean);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.a)) {
        this.a = data().deepCopy(fields()[3].schema(), other.a);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.weirdUnion)) {
        this.weirdUnion = data().deepCopy(fields()[4].schema(), other.weirdUnion);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.ids)) {
        this.ids = data().deepCopy(fields()[5].schema(), other.ids);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.arrayUnion)) {
        this.arrayUnion = data().deepCopy(fields()[6].schema(), other.arrayUnion);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing TestSchema instance
     * @param other The existing instance to copy.
     */
    private Builder(dove.TestSchema other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.myInt)) {
        this.myInt = data().deepCopy(fields()[0].schema(), other.myInt);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.myDefaultInt)) {
        this.myDefaultInt = data().deepCopy(fields()[1].schema(), other.myDefaultInt);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.myBoolean)) {
        this.myBoolean = data().deepCopy(fields()[2].schema(), other.myBoolean);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.a)) {
        this.a = data().deepCopy(fields()[3].schema(), other.a);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.weirdUnion)) {
        this.weirdUnion = data().deepCopy(fields()[4].schema(), other.weirdUnion);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.ids)) {
        this.ids = data().deepCopy(fields()[5].schema(), other.ids);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.arrayUnion)) {
        this.arrayUnion = data().deepCopy(fields()[6].schema(), other.arrayUnion);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'myInt' field.
      * @return The value.
      */
    public java.lang.Integer getMyInt() {
      return myInt;
    }

    /**
      * Sets the value of the 'myInt' field.
      * @param value The value of 'myInt'.
      * @return This builder.
      */
    public dove.TestSchema.Builder setMyInt(int value) {
      validate(fields()[0], value);
      this.myInt = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'myInt' field has been set.
      * @return True if the 'myInt' field has been set, false otherwise.
      */
    public boolean hasMyInt() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'myInt' field.
      * @return This builder.
      */
    public dove.TestSchema.Builder clearMyInt() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'myDefaultInt' field.
      * @return The value.
      */
    public java.lang.Integer getMyDefaultInt() {
      return myDefaultInt;
    }

    /**
      * Sets the value of the 'myDefaultInt' field.
      * @param value The value of 'myDefaultInt'.
      * @return This builder.
      */
    public dove.TestSchema.Builder setMyDefaultInt(int value) {
      validate(fields()[1], value);
      this.myDefaultInt = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'myDefaultInt' field has been set.
      * @return True if the 'myDefaultInt' field has been set, false otherwise.
      */
    public boolean hasMyDefaultInt() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'myDefaultInt' field.
      * @return This builder.
      */
    public dove.TestSchema.Builder clearMyDefaultInt() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'myBoolean' field.
      * @return The value.
      */
    public java.lang.Boolean getMyBoolean() {
      return myBoolean;
    }

    /**
      * Sets the value of the 'myBoolean' field.
      * @param value The value of 'myBoolean'.
      * @return This builder.
      */
    public dove.TestSchema.Builder setMyBoolean(boolean value) {
      validate(fields()[2], value);
      this.myBoolean = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'myBoolean' field has been set.
      * @return True if the 'myBoolean' field has been set, false otherwise.
      */
    public boolean hasMyBoolean() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'myBoolean' field.
      * @return This builder.
      */
    public dove.TestSchema.Builder clearMyBoolean() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'a' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getA() {
      return a;
    }

    /**
      * Sets the value of the 'a' field.
      * @param value The value of 'a'.
      * @return This builder.
      */
    public dove.TestSchema.Builder setA(java.nio.ByteBuffer value) {
      validate(fields()[3], value);
      this.a = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'a' field has been set.
      * @return True if the 'a' field has been set, false otherwise.
      */
    public boolean hasA() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'a' field.
      * @return This builder.
      */
    public dove.TestSchema.Builder clearA() {
      a = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'weirdUnion' field.
      * @return The value.
      */
    public java.lang.Object getWeirdUnion() {
      return weirdUnion;
    }

    /**
      * Sets the value of the 'weirdUnion' field.
      * @param value The value of 'weirdUnion'.
      * @return This builder.
      */
    public dove.TestSchema.Builder setWeirdUnion(java.lang.Object value) {
      validate(fields()[4], value);
      this.weirdUnion = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'weirdUnion' field has been set.
      * @return True if the 'weirdUnion' field has been set, false otherwise.
      */
    public boolean hasWeirdUnion() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'weirdUnion' field.
      * @return This builder.
      */
    public dove.TestSchema.Builder clearWeirdUnion() {
      weirdUnion = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'ids' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.Integer> getIds() {
      return ids;
    }

    /**
      * Sets the value of the 'ids' field.
      * @param value The value of 'ids'.
      * @return This builder.
      */
    public dove.TestSchema.Builder setIds(java.util.Map<java.lang.CharSequence,java.lang.Integer> value) {
      validate(fields()[5], value);
      this.ids = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'ids' field has been set.
      * @return True if the 'ids' field has been set, false otherwise.
      */
    public boolean hasIds() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'ids' field.
      * @return This builder.
      */
    public dove.TestSchema.Builder clearIds() {
      ids = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'arrayUnion' field.
      * @return The value.
      */
    public java.util.List<dove.NestedSchema> getArrayUnion() {
      return arrayUnion;
    }

    /**
      * Sets the value of the 'arrayUnion' field.
      * @param value The value of 'arrayUnion'.
      * @return This builder.
      */
    public dove.TestSchema.Builder setArrayUnion(java.util.List<dove.NestedSchema> value) {
      validate(fields()[6], value);
      this.arrayUnion = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'arrayUnion' field has been set.
      * @return True if the 'arrayUnion' field has been set, false otherwise.
      */
    public boolean hasArrayUnion() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'arrayUnion' field.
      * @return This builder.
      */
    public dove.TestSchema.Builder clearArrayUnion() {
      arrayUnion = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TestSchema build() {
      try {
        TestSchema record = new TestSchema();
        record.myInt = fieldSetFlags()[0] ? this.myInt : (java.lang.Integer) defaultValue(fields()[0]);
        record.myDefaultInt = fieldSetFlags()[1] ? this.myDefaultInt : (java.lang.Integer) defaultValue(fields()[1]);
        record.myBoolean = fieldSetFlags()[2] ? this.myBoolean : (java.lang.Boolean) defaultValue(fields()[2]);
        record.a = fieldSetFlags()[3] ? this.a : (java.nio.ByteBuffer) defaultValue(fields()[3]);
        record.weirdUnion = fieldSetFlags()[4] ? this.weirdUnion : (java.lang.Object) defaultValue(fields()[4]);
        record.ids = fieldSetFlags()[5] ? this.ids : (java.util.Map<java.lang.CharSequence,java.lang.Integer>) defaultValue(fields()[5]);
        record.arrayUnion = fieldSetFlags()[6] ? this.arrayUnion : (java.util.List<dove.NestedSchema>) defaultValue(fields()[6]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TestSchema>
    WRITER$ = (org.apache.avro.io.DatumWriter<TestSchema>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TestSchema>
    READER$ = (org.apache.avro.io.DatumReader<TestSchema>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
