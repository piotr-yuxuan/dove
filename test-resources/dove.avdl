@namespace("dove")

protocol Messages {

  record PrimitiveTypes {
    null aNull;
    boolean aBoolean;
    int aInt;
    long aLong;
    float aFloat;
    double aDouble;
    bytes aBytes;
    string aString;
  }

  record EmptyRecord {}

  record ParentRecord {
    PrimitiveTypes child;
  }

  enum SomeEnum {
    ONE, Two, three
  }

  fixed Fixed8(8);
  fixed Fixed16(16);

  record ArrayRecord {
    array<null> arrayNull;
    array<boolean> arrayBoolean;
    array<int> arrayInt;
    array<long> arrayLong;
    array<float> arrayFloat;
    array<double> arrayDouble;
    array<bytes> arrayBytes;
    array<string> arrayString;
    array<SomeEnum> arraySomeEnum;
    array<EmptyRecord> arrayEmptyRecord;
    array<Fixed8> arrayFixed8;
  }

  record MapRecord {
    map<null> mapNull;
    map<boolean> mapBoolean;
    map<int> mapInt;
    map<long> mapLong;
    map<float> mapFloat;
    map<double> mapDouble;
    map<bytes> mapBytes;
    map<string> mapString;
    map<SomeEnum> mapSomeEnum;
    map<EmptyRecord> mapEmptyRecord;
    map<Fixed8> mapFixed8;
  }

  enum CardSuit {
    CLUB, DIAMOND, HEART, SPADE
  }

  record UnionRecord {
    union { null, boolean } nullBoolean;
    union { boolean, int } booleanInt;
    union { int, bytes } intBytes;
    union { string, long } stringLong;
    union { SomeEnum, double } someEnumDouble;
    union { Fixed8, float } fixed8Float;
    union { ParentRecord, EmptyRecord } parentRecordEmptyRecord;
    union { null, SomeEnum, CardSuit, Fixed8, Fixed16, int } nullSomeEnumCardSuitFixed8Fixed16Int;
  }

  record UnionRecordDefault {
    union { null, boolean } nullBoolean = null;
    union { boolean, null } booleanNull = false;
    union { boolean, int } booleanInt = true;
    union { int, boolean } intBoolean = 0;
    union { int, bytes } intBytes = 1;
    union { bytes, int } bytesInt = "\uCAFE";
    union { string, long } stringLong = "";
    union { long, string } longString = 2.3;
    union { SomeEnum, double } someEnumDouble = "ONE";
    union { double, SomeEnum } doubleSomeEnum = 4.5;
    union { Fixed8, float } fixed8Float = "\uCAFE\uCAFE\uCAFE\uCAFE\uCAFE\uCAFE\uCAFE\uCAFE";
    union { float, Fixed8 } floatFixed8 = 6.7;

    union { ParentRecord, EmptyRecord } parentRecordEmptyRecord;
    union { EmptyRecord, ParentRecord } emptyRecordParentRecord = {};

    union { null, SomeEnum, CardSuit, Fixed8, Fixed16, int } nullSomeEnumCardSuitFixed8Fixed16Int = null;
    union { SomeEnum, CardSuit, Fixed8, Fixed16, int, null } someEnumCardSuitFixed8Fixed16IntNull = "Two";
    union { CardSuit, Fixed8, Fixed16, int, null, SomeEnum } cardSuitfixed8Fixed16IntNullSomeEnum = "DIAMOND";
    union { Fixed8, Fixed16, int, null, SomeEnum, CardSuit } fixed8Fixed16IntNullSomeEnumCardSuit = "\uCAFE\uCAFE\uCAFE\uCAFE\uCAFE\uCAFE\uCAFE\uCAFE";
    union { Fixed16, int, null, SomeEnum, CardSuit, Fixed8 } fixed16IntNullSomeEnumCardSuitFixed8 = "\uCAFE\uCAFE\uCAFE\uCAFE\uCAFE\uCAFE\uCAFE\uCAFE\uCAFE\uCAFE\uCAFE\uCAFE\uCAFE\uCAFE\uCAFE\uCAFE";
    union { int, null, SomeEnum, CardSuit, Fixed8, Fixed16 } intNullSomeEnumCardSuitFixed8Fixed16 = 8;
  }

  fixed IPv4(4);
  fixed IPv6(16);

  record NestedSchema {
    union { null, IPv4, IPv6 } nestedIp = null;
    union { null, array<NestedSchema> } nestedRecursiveArrayUnion = null;
  }

  record TestSchema {
    int myInt;
    int myDefaultInt = 2;
    boolean myBoolean;
    bytes a;
    union { int, null, boolean } weirdUnion= 1;
    map<int> ids = {};
    union { null, array<NestedSchema> } arrayUnion = null;
  }
}
